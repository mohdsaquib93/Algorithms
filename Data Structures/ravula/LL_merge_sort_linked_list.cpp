#include <bits/stdc++.h>#include "LL_CreateList.h"using namespace std;void findmid(Node *head, Node **l, Node **r){    Node *slow = head;    Node *fast = head->next->next;    while(fast) {        slow = slow->next;        fast = fast->next;        if(fast)            fast = fast->next;    }    *l = head;    *r = slow->next;    slow->next = nullptr;}void merge_procedure(Node *l, Node *r, Node **start){    Node *ptr1 = l, *ptr2 = r;    Node *visited, *head = nullptr;    if(ptr1->data <= ptr2->data) {        head = ptr1;        ptr1 = ptr1->next;    }    else {        head = ptr2;        ptr2 = ptr2->next;    }    visited = head;    *start = head;    while(ptr1 && ptr2) {        if(ptr1->data <= ptr2->data)  {            visited->next = ptr1;            ptr1 = ptr1->next;        }        else {            visited->next = ptr2;            ptr2 = ptr2->next;        }        visited = visited->next;    }    visited->next = !ptr1 ? ptr2 : ptr1;}void mergesort(Node **start){    Node *head = *start;    if(!head || !head->next)        return;    Node *a, *b;    a = b = nullptr;    findmid(head, &a, &b);    mergesort(&a);    mergesort(&b);    merge_procedure(a, b, start);}int main(){    LinkedList *list = new LinkedList();    srand(time(NULL));    for(int i = 0; i < 10; ++i)        list->add(rand() % 50);    Node *start = list->head;    while(start) {        cout << start->data << " ";        start = start->next;    }    start = list->head;    mergesort(&start);    cout << "\nSorted list: ";    while(start) {        cout << start->data << " ";        start = start->next;    }    return 0;}